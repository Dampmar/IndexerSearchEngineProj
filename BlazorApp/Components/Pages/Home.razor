@page "/"
@rendermode InteractiveServer

@using Classes
@using iTextSharp.text.pdf;
@using iTextSharp.text.pdf.parser;
@using System.Text;

<PageTitle>Search Documents</PageTitle>

<h1>Search Documents</h1>

<div>
    <h2>Select Options</h2>
    <label for="vectorizer">Choose Vectorization Method:</label>
    <select @bind="selectedVectorizer">
        <option value="">Select Method</option>
        <option value="tfidf">TFIDF</option>
        <option value="vectorizer">Vectorizer</option>
    </select>
</div>

<div>
    <label for="distance">Choose Distance Metric:</label>
    <select @bind="selectedDistance">
        <option value="">Select Metric</option>
        <option value="cosine">Cosine</option>
        <option value="euclidean">Euclidean</option>
    </select>
</div>

<div>
    <input @bind="query" placeholder="Enter your search query" />
    <button class="btn btn-primary" @onclick="Search">Search</button>
</div>

@if (results != null && results.Any())
{
    <h2>Search Results:</h2>
    <ul>
        @foreach (var result in results)
        {
            <li>
                <a href="#" @onclick="() => OpenDocument(result)">@result</a>
            </li>
        }
    </ul>
}
else if (results != null)
{
    <p>No results found.</p>
}

@if (!string.IsNullOrEmpty(selectedDocumentContent))
{
    <h2>Document Content:</h2>
    <div>
        @selectedDocumentContent
    </div>
}

@code {
    private string query;
    private List<string> results;
    private Indexer indexer;
    private string selectedDocumentContent;
    
    // Declaración de variables sin valores por defecto
    private string selectedVectorizer; 
    private string selectedDistance; 

    protected override async Task OnInitializedAsync()
    {
        indexer = new Indexer();
        string folderPath = "/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders"; // Reemplazar con la ruta correcta
        
        // No se llama a IndexFolder aquí; se hace en el botón de búsqueda
        LoadIndex(); // Cargar el índice después de indexar
    }

    private void LoadIndex()
    {
        string indexPath = "/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders/index.json"; // Reemplazar con la ruta correcta
        indexer.LoadIndex(indexPath);
        Console.WriteLine($"Loaded {indexer.Documents.Count} documents from index.");
    }

    private string ReadPdfContent(string filePath)
    {
        StringBuilder text = new StringBuilder();
        using (PdfReader reader = new PdfReader(filePath))
        {
            for (int i = 1; i <= reader.NumberOfPages; i++)
            {
                string pageText = PdfTextExtractor.GetTextFromPage(reader, i);
                text.Append(pageText);
            }
        }
        return text.ToString();
    }

    private async Task Search()
    {
        Console.WriteLine($"Query received: {query}");

        // Verifica que se seleccionen los métodos
        if (string.IsNullOrWhiteSpace(selectedVectorizer) || string.IsNullOrWhiteSpace(selectedDistance))
        {
            selectedDocumentContent = "Please select both a vectorization method and a distance metric.";
            return;
        }

        if (!string.IsNullOrWhiteSpace(query))
        {
            Console.WriteLine($"Searching for: {query}");
            try
            {
                // Indexar la carpeta con los métodos seleccionados
                string folderPath = "/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders"; // Reemplazar con la ruta correcta
                await Task.Run(() => indexer.IndexFolder(folderPath, selectedVectorizer, selectedDistance));

                results = indexer.Search(query, 10, selectedDistance); // Usa la métrica de distancia seleccionada
                Console.WriteLine($"Found {results.Count} results.");

                if (results.Count == 0)
                {
                    selectedDocumentContent = "No documents";
                }

                foreach (var result in results)
                {
                    Console.WriteLine($"Result: {result}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during search: {ex.Message}");
                selectedDocumentContent = "No documents."; 
            }
        }
        else
        {
            selectedDocumentContent = "No documents."; 
        }
    }

    private void OpenDocument(string documentName)
    {
        try
        {
            string documentPath = $"/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders/IndexerTesting/{documentName}";
            Console.WriteLine($"Attempting to open document at path: {documentPath}");

            if (!System.IO.File.Exists(documentPath))
            {
                throw new FileNotFoundException($"File not found: {documentPath}");
            }

            string extension = System.IO.Path.GetExtension(documentPath).ToLower();

            if (extension == ".pdf")
            {
                selectedDocumentContent = ReadPdfContent(documentPath);
            }
            else
            {
                selectedDocumentContent = System.IO.File.ReadAllText(documentPath);
            }

            Console.WriteLine($"Opened document: {documentName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening document: {ex.Message}");
            selectedDocumentContent = "No documents."; 
        }
    }
}
