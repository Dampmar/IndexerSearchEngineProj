@page "/"
@rendermode InteractiveServer

@using Classes
@using iTextSharp.text.pdf;
@using iTextSharp.text.pdf.parser;
@using System.Text

<PageTitle>Search Documents</PageTitle>

<h1>Search Documents</h1>

<div>
    <input @bind="query" placeholder="Enter your search query" />
    <button class="btn btn-primary" @onclick="Search">Search</button>
</div>

@if (results != null && results.Any())
{
    <h2>Search Results:</h2>
    <ul>
        @foreach (var result in results)
        {
            <li>
                <a href="#" @onclick="() => OpenDocument(result)">@result</a> <!-- Hyperlink for each result -->
            </li>
        }
    </ul>
}
else if (results != null)
{
    <p>No results found.</p>
}

@if (!string.IsNullOrEmpty(selectedDocumentContent)) // Check if there is content to display
{
    <h2>Document Content:</h2>
    <div>
        @selectedDocumentContent
    </div>
}

@code {
    private string query;
    private List<string> results;
    private Indexer indexer; // Declare the indexer instance
    private string selectedDocumentContent; // To hold the content of the opened document

    protected override async Task OnInitializedAsync()
    {
        indexer = new Indexer();
        string folderPath = "/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders"; // Replace with actual path
        await Task.Run(() => indexer.IndexFolder(folderPath, "vectorizer", "cosine")); // Index the folder
        LoadIndex(); // Load the index after indexing
    }

    private void LoadIndex()
    {
        string indexPath = "/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders/index.json"; // Replace with actual path
        indexer.LoadIndex(indexPath);
        Console.WriteLine($"Loaded {indexer.Documents.Count} documents from index."); // Debugging line
    }

    private string ReadPdfContent(string filePath)
    {
        StringBuilder text = new StringBuilder();

        using (PdfReader reader = new PdfReader(filePath))
        {
            for (int i = 1; i <= reader.NumberOfPages; i++)
            {
                // Extraer el texto de cada página
                string pageText = PdfTextExtractor.GetTextFromPage(reader, i);
                text.Append(pageText);
            }
        }

        return text.ToString();
    }

private async Task Search()
{
    Console.WriteLine($"Query received: {query}");
    if (!string.IsNullOrWhiteSpace(query))
    {
        Console.WriteLine($"Searching for: {query}");
        try
        {
            results = indexer.Search(query, 10, "cosine");
            Console.WriteLine($"Found {results.Count} results.");

            if (results.Count == 0)
            {
                // Si no se encontraron resultados, mostrar "No documents"
                selectedDocumentContent = "No documents";
            }

            foreach (var result in results)
            {
                Console.WriteLine($"Result: {result}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during search: {ex.Message}");
            selectedDocumentContent = "No documents."; // En caso de error, mostrar "No documents"
        }
    }
    else
    {
        selectedDocumentContent = "No documents."; // Si la consulta está vacía
    }
}


    private void OpenDocument(string documentName)
    {
        try
        {
            string documentPath = $"/Users/jennifervicentesvalle/Desktop/TTU/Object-Oriented Programming/IndexerSearchEngineProj/Folders/IndexerTesting/{documentName}";
            Console.WriteLine($"Attempting to open document at path: {documentPath}");

            if (!System.IO.File.Exists(documentPath))
            {
                throw new FileNotFoundException($"File not found: {documentPath}");
            }

            string extension = System.IO.Path.GetExtension(documentPath).ToLower();

            if (extension == ".pdf")
            {
                selectedDocumentContent = ReadPdfContent(documentPath);
            }
            else
            {
                selectedDocumentContent = System.IO.File.ReadAllText(documentPath);
            }

            Console.WriteLine($"Opened document: {documentName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening document: {ex.Message}");
            selectedDocumentContent = "No documents."; // En caso de error, mostrar "No documents"
        }
    }

}
